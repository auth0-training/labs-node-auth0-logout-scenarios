{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "1: Manage logout of a web app",
  "steps": [
    {
      "file": "",
      "line": 1,
      "description": "## What you'll learn\n\nIn this scenario, we will launch a web application using Auth0 as the identity provider. When a user logs in, there are two layers of sessions: the Auth0 session and the application session.\n\n![](https://cdn.auth0.com/website/oktalearning/diagrams/sessions-diagram.png)\n\nSuppose we don't want to leave the Auth0 session open when the user logs out. We want to end both the application session and the Auth0 session.\n\n![](https://cdn.auth0.com/website/oktalearning/diagrams/sessions-logout-diagram.png)\n\nIn this lab, we'll cover how to log users out of your application by:\n- Ending the application session by invalidating the session cookie and clearing session storage using the Auth0 `express-openid-connect` library.\n- Ending the Auth0 session with and redirecting users after logout with the [Auth0 alternative logout endpoint](https://auth0.com/docs/authenticate/login/logout/redirect-users-after-logout) through the Auth0 `express-openid-connect` library.\n",
      "selection": {
        "start": {
          "line": 12,
          "character": 77
        },
        "end": {
          "line": 13,
          "character": 81
        }
      }
    },
    {
      "title": "Launch the web app",
      "description": "## Launch the web app\n\n1. Select [this link](command:auth0.lab.tenantConfigure)  to automatically register the web applications we'll use in this lab. This will create **Lab: Web App A** and **Lab: Web App B** in your tenant.\n1. Select [this link](auth0.lab.localConfigure) to automatically create the .env files for these web applications in this workspace. \n1. Select [this link](command:workbench.action.debug.start) to start the applications. \n> This will launch Web App A on port 37500 and Web App B on port 37501. We will only be using Web App A in this section.\n1. Select the **PORTS** tab in this workspace.\n1. Right click on Port 37500 and select **Port visibility** > **Public**.\n1. Repeat this step for Port 37501, as we will use the second web app later in this lab.\n"
    },
    {
      "title": "Configure connections",
      "description": "## Configure connections\n\nWe're going to set up the application so it only uses Auth0 as an identity provider.\n\n1. From your Auth0 Management Dashboard, go to **Applications** > **Applications**.\n2. Select **Lab: Web App A**.\n3. Select the **Connections** tab.\n4. Disable all connections except for **Username-Password-Authentication**."
    },
    {
      "title": "Register and sign in",
      "description": "## Register and sign in\n1. From this workspace, go to the **PORTS** tab.\n1. Locate **Port 37500** (Web App A) and hover over its **Forwarded Address**.\n1. Select the globe icon to open the app in a new tab (we assume you are using the Chrome browser for this lab).\n1. From Web App A (Expenses), select the **Login** link.\n1. Select **Sign up** and complete the registration process with a username and password you will be able to recall.\n> You are now signed in!"
    },
    {
      "title": "Log out of the app",
      "description": "## Log out of the app\n\n1. Open **Google Chrome Developer Tools** (Control + Shift + J on Windows and Linux, or Command + Option + J on Mac).\n1. In the Google Chrome Developer Tools panel, select the **Network** tab.\n1. Select the **Logout** link.\n1. In the **Network** tab, notice a request for your app's `/logout` endpoint. This is an endpoint defined by the Auth0 SDK `express-openid-connect`, which this app uses.\n1. Pause and consider the following question: What do you expect will happen when you select **Login** again?\n1. Select **Login**. Did you have to re-enter your credentials?\n\n\n> You may have been surprised to see you did not have to re-enter your credentials. In this app, we are using the Auth0 library [`express-openid-connect`](https://github.com/auth0/express-openid-connect/) to manage authentication. By default, its `auth` middleware does NOT close the IdP session upon logout. Your application session ends because it has been configured to invalidate the session cookie. However, once the user selects **Login** again, Auth0 finds a valid Auth0 session and does not prompt the user for authentication before returning OIDC tokens. In some cases, you may desire this behavior, but in our case we don't! In the next step, we'll see how we can end the Auth0 session as well.\n"
    },
    {
      "file": "src/web-app/index.js",
      "description": "## Configure the auth middleware to close the Auth0 session\n\n*Notice that /web-app/index.js has been opened for you.*\n\nThe [`auth`](https://auth0.github.io/express-openid-connect/functions/auth.html) middleware is part of the Auth0 SDK `express-openid-connect`. It takes required parameters (`clientId`, `secret`, `baseURL`, `issuerBaseURL`) necessary to complete application authentication. You can also provide additional optional [ConfigParams](https://auth0.github.io/express-openid-connect/interfaces/ConfigParams.html) like `idpLogout`.\n\nSpecifying `idpLogout: true` will log a user out of the IdP (Auth0 in this case) when they log out of the application. **Note:** If you are using a custom domain for your Auth0 tenant, you should use `auth0Logout: true` instead.\n\n1. **Uncomment** the line above to set `idpLogout: true`.\n1. Select [this link]() to stop the web app.\n1. Select [this link]() to launch the web app again.",
      "line": 47
    },
    {
      "title": "Examine the logout flow using express-openid-connect",
      "file": "src/web-app/index.js",
      "description": "## Examine the logout flow using `express-openid-connect`\n\n> The diagram below illuastrates the login flow when you use `express-openid-connect` in your Express web apps and set `idpLogout: true`.\n\nWhen you use `express-openid-connect` by calling `app.use(auth{configs})`, it defines `/login` and `/logout` endpoints for your web app. When you direct a user to log out via the `/logout` endpoint, the request is passed to the `express-openid-connect` middleware, which clears the application session cookie. \n\nIf `idpLogout: true`, then the middleware performs a redirect to your Auth0 Authorization Server's alternative logout endpoint, specifying a post-logout URI. By default, this is the root page (`/`) of your web app. This ends the Auth0 session and redirects the user to the unauthenticated view of the post-logout page.\n\n![](https://raw.githubusercontent.com/auth0/express-openid-connect/refs/heads/master/logout.png)",
      "line": 53,
      "selection": {
        "start": {
          "line": 41,
          "character": 1
        },
        "end": {
          "line": 53,
          "character": 100
        }
      }
    },
    {
      "file": "README.md",
      "line": 1,
      "title": "Recap",
      "description": "\n**In this lab you:**\n\n- Ended the application session by invalidating the session cookie and clearing session storage.\n- Ended the Auth0 session with the [Auth0 alternative logout endpoint](https://auth0.com/docs/authenticate/login/logout/redirect-users-after-logout).\n\nYou achieved this by using the Auth0 `express-openid-connect` library."
    }
  ]
}